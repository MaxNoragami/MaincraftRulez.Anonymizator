//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MaincraftRulez.Anonymizator.Activities.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MaincraftRulez.Anonymizator.Activities.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Authentication.
        /// </summary>
        public static string Authentication_Category {
            get {
                return ResourceManager.GetString("Authentication_Category", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Common.
        /// </summary>
        public static string Common_Category {
            get {
                return ResourceManager.GetString("Common_Category", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, continue executing the remaining activities even if the current activity has failed..
        /// </summary>
        public static string ContinueOnError_Description {
            get {
                return ResourceManager.GetString("ContinueOnError_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContinueOnError.
        /// </summary>
        public static string ContinueOnError_DisplayName {
            get {
                return ResourceManager.GetString("ContinueOnError_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do.
        /// </summary>
        public static string Do {
            get {
                return ResourceManager.GetString("Do", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Input.
        /// </summary>
        public static string Input_Category {
            get {
                return ResourceManager.GetString("Input_Category", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Options.
        /// </summary>
        public static string Options_Category {
            get {
                return ResourceManager.GetString("Options_Category", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Output.
        /// </summary>
        public static string Output_Category {
            get {
                return ResourceManager.GetString("Output_Category", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text after anonymization..
        /// </summary>
        public static string TextAnonymization_AnonymizedText_Description {
            get {
                return ResourceManager.GetString("TextAnonymization_AnonymizedText_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymized Text.
        /// </summary>
        public static string TextAnonymization_AnonymizedText_DisplayName {
            get {
                return ResourceManager.GetString("TextAnonymization_AnonymizedText_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text Anonymization transforms readable text into an encrypted form while preserving its original format, structure, and character types, allowing sensitive information to be protected..
        /// </summary>
        public static string TextAnonymization_Description {
            get {
                return ResourceManager.GetString("TextAnonymization_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text Anonymization.
        /// </summary>
        public static string TextAnonymization_DisplayName {
            get {
                return ResourceManager.GetString("TextAnonymization_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text before anonymization..
        /// </summary>
        public static string TextAnonymization_OriginalText_Description {
            get {
                return ResourceManager.GetString("TextAnonymization_OriginalText_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original Text.
        /// </summary>
        public static string TextAnonymization_OriginalText_DisplayName {
            get {
                return ResourceManager.GetString("TextAnonymization_OriginalText_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text before deanonymization..
        /// </summary>
        public static string TextDeanonymization_AnonymizedText_Description {
            get {
                return ResourceManager.GetString("TextDeanonymization_AnonymizedText_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Anonymized Text.
        /// </summary>
        public static string TextDeanonymization_AnonymizedText_DisplayName {
            get {
                return ResourceManager.GetString("TextDeanonymization_AnonymizedText_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text Deanonymization reverses the anonymization process by transforming encrypted text back to its original readable form while preserving the format, structure, and character types that were maintained during anonymization, allowing sensitive information to be securely recovered when authorized..
        /// </summary>
        public static string TextDeanonymization_Description {
            get {
                return ResourceManager.GetString("TextDeanonymization_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Text Deanonymization.
        /// </summary>
        public static string TextDeanonymization_DisplayName {
            get {
                return ResourceManager.GetString("TextDeanonymization_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The text after deanonymization..
        /// </summary>
        public static string TextDeanonymization_OriginalText_Description {
            get {
                return ResourceManager.GetString("TextDeanonymization_OriginalText_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Original Text.
        /// </summary>
        public static string TextDeanonymization_OriginalText_DisplayName {
            get {
                return ResourceManager.GetString("TextDeanonymization_OriginalText_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the amount of time (in milliseconds) to wait for the activity to run before an error is thrown. The default value is 60000 (1 minute)..
        /// </summary>
        public static string Timeout_Description {
            get {
                return ResourceManager.GetString("Timeout_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout (milliseconds).
        /// </summary>
        public static string Timeout_DisplayName {
            get {
                return ResourceManager.GetString("Timeout_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The activity timed out and was canceled..
        /// </summary>
        public static string Timeout_Error {
            get {
                return ResourceManager.GetString("Timeout_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A scoped activity in which the anonymization activities can be used..
        /// </summary>
        public static string UseAnonymization_Description {
            get {
                return ResourceManager.GetString("UseAnonymization_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use Anonymization.
        /// </summary>
        public static string UseAnonymization_DisplayName {
            get {
                return ResourceManager.GetString("UseAnonymization_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The key is the secret cryptographic value that controls access to encrypted data, serving as the primary security element in the encryption process that must be securely managed, as its compromise would allow an attacker to decrypt all data encrypted with that key..
        /// </summary>
        public static string UseAnonymization_Key_Description {
            get {
                return ResourceManager.GetString("UseAnonymization_Key_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Key.
        /// </summary>
        public static string UseAnonymization_Key_DisplayName {
            get {
                return ResourceManager.GetString("UseAnonymization_Key_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A tweak is a non-secret parameter that adds variability to the encryption process, ensuring that identical data encrypted with the same key but different tweaks produces unique ciphertexts, effectively preventing pattern recognition in encrypted values while allowing for domain separation of different data types..
        /// </summary>
        public static string UseAnonymization_Tweak_Description {
            get {
                return ResourceManager.GetString("UseAnonymization_Tweak_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Tweak.
        /// </summary>
        public static string UseAnonymization_Tweak_DisplayName {
            get {
                return ResourceManager.GetString("UseAnonymization_Tweak_DisplayName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide a value either for {0} or {1}, but not both..
        /// </summary>
        public static string ValidationExclusiveProperties_Error {
            get {
                return ResourceManager.GetString("ValidationExclusiveProperties_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide values for both {0} and {1}..
        /// </summary>
        public static string ValidationOverloadGroup_Error {
            get {
                return ResourceManager.GetString("ValidationOverloadGroup_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot be used outside of a {0}..
        /// </summary>
        public static string ValidationScope_Error {
            get {
                return ResourceManager.GetString("ValidationScope_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide a value for {0}..
        /// </summary>
        public static string ValidationValue_Error {
            get {
                return ResourceManager.GetString("ValidationValue_Error", resourceCulture);
            }
        }
    }
}
